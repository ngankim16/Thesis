 public function taoHoiDong()
 {

 // Kiểm tra nếu đã có hội đồng cho sinh viên
 $existing = DB::table('duoc_danh_gia')->exists();
 if ($existing) {
 return redirect()->back()->with('thongbao', 'Hội đồng đã được tạo trước đó.');
 }

 // Lấy danh sách giảng viên và sinh viên
 $giangViens = DB::table('giang_vien')->get();
 $sinhViens = DB::table('sinh_vien')->get();

 // Kiểm tra nếu không có đủ giảng viên hoặc sinh viên
 if ($giangViens->isEmpty()) {
 return redirect()->back()->with('thongbao', 'Không đủ giảng viên để tạo hội đồng.');
 }

 // Tạo danh sách để theo dõi số lần đảm nhận vai trò của từng giảng viên
 $vaiTroGiangVien = [];
 foreach ($giangViens as $giangVien) {
 $vaiTroGiangVien[$giangVien->MA_GV] = [
 'so_lan' => 0, // Tổng số lần đảm nhận vai trò
 ];
 }

 foreach ($sinhViens as $sinhVien) {
 $giangVienHuongDan = $sinhVien->MA_GV; // Lấy giảng viên hướng dẫn của sinh viên này

 // Loại giảng viên hướng dẫn ra khỏi danh sách Chủ tịch cho sinh viên này
 $giangViensChucVu = $giangViens->filter(function ($gv) use ($giangVienHuongDan) {
 return $gv->MA_GV != $giangVienHuongDan;
 });

 // Chọn Chủ tịch
 $chuTich = $this->selectGiangVien($giangViensChucVu, $vaiTroGiangVien);
 $vaiTroGiangVien[$chuTich->MA_GV]['so_lan']++;

 // Cập nhật danh sách giảng viên cho Phó Chủ tịch
 $giangViensChucVu = $giangViensChucVu->filter(function ($gv) use ($chuTich) {
 return $gv->MA_GV != $chuTich->MA_GV;
 });

 // Chọn Phó Chủ tịch
 $phoChuTich = $this->selectGiangVien($giangViensChucVu, $vaiTroGiangVien);
 $vaiTroGiangVien[$phoChuTich->MA_GV]['so_lan']++;

 // Giảng viên hướng dẫn làm Thư ký
 $thuKy = $giangVienHuongDan;
 $vaiTroGiangVien[$thuKy]['so_lan']++;

 // Tạo mã hội đồng mới
 $lastHoiDong = DB::table('hoi_dong_danh_gia')->orderBy('MA_HD', 'desc')->first();
 $newMaHD = $lastHoiDong ? 'HD' . str_pad((int)substr($lastHoiDong->MA_HD, 2) + 1, 3, '0', STR_PAD_LEFT) : 'HD001';

 // Tạo hội đồng đánh giá với ngày tạo
 DB::table('hoi_dong_danh_gia')->insert([
 'MA_HD' => $newMaHD,
 'CHU_TICH_HD' => $chuTich->MA_GV,
 'PHO_CHU_TICH_HD' => $phoChuTich->MA_GV,
 'THUKY_HD' => $thuKy,
 'NGAY_TAO' => now(),
 ]);

 // Lưu giảng viên với vai trò vào bảng gom cho hội đồng mới
 DB::table('gom')->insert([
 'MA_HD' => $newMaHD,
 'MA_GV' => $chuTich->MA_GV,
 'DUYET_THAM_GIA' => NULL, // Mặc định là NULL (chưa duyệt)
 ]);

 DB::table('gom')->insert([
 'MA_HD' => $newMaHD,
 'MA_GV' => $phoChuTich->MA_GV,
 'DUYET_THAM_GIA' => NULL, // Mặc định là NULL (chưa duyệt)
 ]);

 DB::table('gom')->insert([
 'MA_HD' => $newMaHD,
 'MA_GV' => $thuKy,
 'DUYET_THAM_GIA' => NULL, // Mặc định là NULL (chưa duyệt)
 ]);

 // Lưu thông tin sinh viên vào hội đồng
 DB::table('duoc_danh_gia')->insert([
 'MA_HD' => $newMaHD,
 'MA_DT' => $sinhVien->MA_DT
 ]);
 }

 return redirect()->back()->with('thongbao', 'Tạo hội đồng thành công ');
 }


 public function save_lbv(Request $request) {
 // Xác thực dữ liệu đầu vào
 $request->validate([
 'MA_BV' => 'required',
 'GIO_BATDAU_BV' => 'required',
 'NGAY_BV' => 'required|date',
 'sinh_vien' => 'required|array',
 ]);

 // Khởi tạo biến
 $morning_start_time = '07:15'; // Giờ bắt đầu buổi sáng
 $morning_end_time = '11:15'; // Giờ kết thúc buổi sáng
 $afternoon_start_time = '13:45'; // Giờ bắt đầu buổi chiều
 $afternoon_end_time = '17:05'; // Giờ kết thúc buổi chiều
 $time_increment = 40; // Thời gian mỗi buổi bảo vệ là 40 phút
 $max_sessions_per_room = 13; // Số buổi bảo vệ tối đa trong một phòng

 $ngay_bv = $request->input('NGAY_BV'); // Ngày cho buổi bảo vệ
 $currentRoom = 1; // Biến để theo dõi phòng đang sử dụng
 $currentStudents = 0; // Biến đếm sinh viên đã được sắp xếp
 $total_students = count($request->input('sinh_vien')); // Tổng số sinh viên cần sắp xếp
 $availableRoom = null; // Khởi tạo biến cho phòng trống
 $gio_bat_dau = $morning_start_time; // Đặt giờ bắt đầu cho buổi bảo vệ

 // Xử lý từng sinh viên
 foreach ($request->input('sinh_vien') as $ma_sv) {
 // Lấy thông tin chuyên ngành và hướng dẫn viên
 $ma_dt = DB::table('sinh_vien')->where('MA_SV', $ma_sv)->value('MA_DT');
 $ma_hd = DB::table('duoc_danh_gia')->where('MA_DT', $ma_dt)->value('MA_HD');

 // Kiểm tra thông tin chuyên ngành và hướng dẫn viên có tồn tại không
 if (!$ma_dt || !$ma_hd) {
 return redirect()->back()->withErrors(['Không tìm thấy thông tin đầy đủ cho sinh viên mã ' . $ma_sv]);
 }

 // Tìm phòng còn trống cho thời gian hiện tại và ngày bảo vệ
 if (is_null($availableRoom)) {
 $availableRoom = $this->findAvailableRoom($gio_bat_dau, $ngay_bv);
 }

 // Nếu không tìm thấy phòng trống, kiểm tra giờ kết thúc
 while (is_null($availableRoom) && ($gio_bat_dau < $morning_end_time || $gio_bat_dau < $afternoon_end_time)) {
         $gio_bat_dau=date('H:i', strtotime("+$time_increment minutes", strtotime($gio_bat_dau))); } // Nếu đến giờ kết
         thúc mà vẫn chưa đủ sinh viên if ($gio_bat_dau>= $morning_end_time && $currentStudents == 0) {
         // Chuyển sang buổi chiều
         $gio_bat_dau = $afternoon_start_time; // Đặt lại giờ cho buổi chiều
         }

         // Nếu đến giờ kết thúc mà vẫn chưa đủ sinh viên
         if ($gio_bat_dau >= $afternoon_end_time) {
         // Chuyển sang ngày tiếp theo
         $ngay_bv = date('Y-m-d', strtotime("+1 day", strtotime($ngay_bv)));
         $gio_bat_dau = $morning_start_time; // Đặt lại giờ cho ngày mới
         $currentRoom = 1; // Đặt lại phòng
         $currentStudents = 0; // Đặt lại số sinh viên đã sắp xếp
         $availableRoom = null; // Đặt lại phòng trống
         continue; // Bỏ qua vòng lặp này và tiếp tục với sinh viên tiếp theo
         }

         // Nếu tìm thấy phòng trống
         if ($availableRoom) {
         $ma_ph = $availableRoom->MA_PH;

         // Sắp xếp cho sinh viên
         $this->scheduleStudent($ma_sv, $ma_ph, $gio_bat_dau, $ma_hd, $ngay_bv);

         $currentStudents++; // Cập nhật số sinh viên đã sắp xếp

         // Nếu phòng hiện tại đã đủ sinh viên
         if ($currentStudents >= $max_sessions_per_room) {
         // Đặt lại số sinh viên đã sắp xếp cho phòng tiếp theo
         $currentStudents = 0;
         $gio_bat_dau = $morning_start_time; // Đặt lại giờ cho phòng tiếp theo (bắt đầu từ buổi sáng)
         $currentRoom++; // Chuyển sang phòng tiếp theo
         $availableRoom = null; // Đặt lại phòng thu dung

         // Tìm phòng tiếp theo
         $availableRoom = $this->findAvailableRoom($gio_bat_dau, $ngay_bv);
         } else {
         // Cập nhật giờ cho sinh viên tiếp theo
         $gio_bat_dau = date('H:i', strtotime("+$time_increment minutes", strtotime($gio_bat_dau)));
         }
         }
         }

         return redirect()->route('lichbaove.list_lbv')->with('thongbao', 'Thêm lịch bảo vệ thành công!');
         }

         // Phương thức tìm phòng còn trống
         private function findAvailableRoom($gio_bat_dau, $ngay_bv) {
         return DB::table('phong_hoc')
         ->whereNotExists(function ($query) use ($gio_bat_dau, $ngay_bv) {
         $query->select(DB::raw(1))
         ->from('buoi_bao_ve')
         ->whereColumn('phong_hoc.MA_PH', 'buoi_bao_ve.MA_PH')
         ->where('buoi_bao_ve.NGAY_BV', $ngay_bv)
         ->where(function($q) use ($gio_bat_dau) {
         $q->whereBetween('buoi_bao_ve.GIO_BATDAU_BV', [
         $gio_bat_dau,
         date('H:i', strtotime($gio_bat_dau . ' +' . 40 . ' minutes'))
         ])
         ->orWhereBetween('buoi_bao_ve.GIO_BATDAU_BV', [
         '11:15:00' ,
         '11:55:00',
         '12:35:00'
         ]);
         });
         })
         ->inRandomOrder()
         ->first();
         }

         // Phương thức sắp xếp cho sinh viên
         private function scheduleStudent($ma_sv, $ma_ph, $gio_bat_dau, $ma_hd, $ngay_bv) {
         // Sinh mã buổi bảo vệ duy nhất
         $lastMaBV = DB::table('buoi_bao_ve')->orderBy('MA_BV', 'desc')->first();
         $ma_bv = $lastMaBV ? 'BV' . str_pad((int)substr($lastMaBV->MA_BV, 2) + 1, 3, '0', STR_PAD_LEFT) : 'BV001';

         // Chèn buổi bảo vệ vào cơ sở dữ liệu
         DB::table('buoi_bao_ve')->insert([
         'MA_BV' => $ma_bv,
         'MA_PH' => $ma_ph,
         'GIO_BATDAU_BV' => $gio_bat_dau,
         'NGAY_BV' => $ngay_bv, // Đảm bảo ngày được truyền vào trong ngữ cảnh này
         'SO_LUONG_BV' => 1, // Giả định này chỉ ra số lượng bảo vệ mỗi phiên
         ]);

         // Tính giờ kết thúc cho buổi bảo vệ
         $gio_ket_thuc = date('H:i', strtotime("+40 minutes", strtotime($gio_bat_dau)));

         // Chèn chi tiết buổi bảo vệ
         DB::table('chitiet_lichbv')->insert([
         'MA_BV' => $ma_bv,
         'MA_SV' => $ma_sv,
         'gio_bat_dau' => $gio_bat_dau,
         'gio_ket_thuc' => $gio_ket_thuc,
         ]);

         // Chèn thông tin tổ chức
         DB::table('to_chuc')->insert([
         'MA_HD' => $ma_hd,
         'MA_BV' => $ma_bv,
         ]);
         }







         /////
             public function save_lbv(Request $request) {
        // Xác thực dữ liệu đầu vào
        $request->validate([
            'MA_BV' => 'required',
            'NGAY_BV' => 'required|date',
            'sinh_vien' => 'required|array',
        ]);
    
        // Khởi tạo biến
        $morning_start = '07:15'; // Giờ bắt đầu buổi sáng
        $morning_end = '10:10'; // Giờ kết thúc buổi sáng
        $afternoon_start = '13:30'; // Giờ bắt đầu buổi chiều
        $afternoon_end = '16:25'; // Giờ kết thúc buổi chiều
        $time_increment = 35; // Mỗi sinh viên bảo vệ 35 phút
        $max_students_per_room = 13; // Mỗi phòng tối đa 13 sinh viên
    
        $current_time = $morning_start; // Giờ bắt đầu hiện tại
        $current_day = $request->input('NGAY_BV'); // Ngày bảo vệ
        $current_room = 1; // Phòng bắt đầu
        $current_students = 0; // Số sinh viên hiện tại trong phòng
    
        // Xử lý từng sinh viên
        foreach ($request->input('sinh_vien') as $ma_sv) {
            // Lấy thông tin chuyên ngành và hội đồng đánh giá
            $ma_dt = DB::table('sinh_vien')->where('MA_SV', $ma_sv)->value('MA_DT');
            $ma_hd = DB::table('duoc_danh_gia')->where('MA_DT', $ma_dt)->value('MA_HD');
    
            if (!$ma_dt || !$ma_hd) {
                return redirect()->back()->withErrors(['Không tìm thấy thông tin đầy đủ cho sinh viên mã ' . $ma_sv]);
            }
            if ($current_students >= $max_students_per_room) {
                // Tìm phòng trống
                $available_room = $this->findAvailableRoom($current_time, $current_day);
                if ($available_room) {
                    // Chuyển sang phòng trống mới
                    $current_room = $available_room->MA_PH;
                    $current_students = 0; // Đặt lại số sinh viên trong phòng
                } else {
                    // Không có phòng trống, chuyển sang ngày tiếp theo
                    $current_day = date('Y-m-d', strtotime('+1 day', strtotime($current_day)));
                    $current_time = $morning_start; // Đặt lại giờ cho ngày mới
                    $current_room = 1; // Đặt lại phòng
                    $current_students = 0; // Đặt lại số sinh viên trong phòng
                }
            }
            
    
            // Nếu hết khung giờ buổi sáng, chuyển sang buổi chiều
            if ($current_time > $morning_end && $current_time < $afternoon_start) {
                $current_time = $afternoon_start;
            }
    
            // Nếu hết giờ trong ngày, chuyển sang ngày tiếp theo
            if ($current_time > $afternoon_end) {
                $current_day = date('Y-m-d', strtotime('+1 day', strtotime($current_day)));
                $current_time = $morning_start; // Đặt lại giờ cho ngày mới
                $current_room = 1; // Đặt lại phòng
                $current_students = 0; // Đặt lại số sinh viên trong phòng
            }
    
            // Tìm phòng hiện tại
            $ma_ph = DB::table('phong_hoc')->where('MA_PH', 'P' . str_pad($current_room, 2, '0', STR_PAD_LEFT))->value('MA_PH');
    
            // Sắp lịch bảo vệ cho sinh viên
            $this->scheduleStudent($ma_sv, $ma_ph, $current_time, $ma_hd, $current_day);
    
            // Tăng số lượng sinh viên trong phòng
            $current_students++;
    
            // Tăng giờ cho sinh viên tiếp theo
            $current_time = date('H:i', strtotime("+$time_increment minutes", strtotime($current_time)));
        }
    
        return redirect()->route('lichbaove.list_lbv')->with('thongbao', 'Thêm lịch bảo vệ thành công!');
    }
    
    private function findAvailableRoom($gio_bat_dau, $ngay_bv) {
        return DB::table('phong_hoc')
            ->whereNotExists(function ($query) use ($gio_bat_dau, $ngay_bv) {
                $query->select(DB::raw(1))
                    ->from('buoi_bao_ve')
                    ->whereColumn('phong_hoc.MA_PH', 'buoi_bao_ve.MA_PH')
                    ->where('buoi_bao_ve.NGAY_BV', $ngay_bv)
                    ->where(function ($subQuery) use ($gio_bat_dau) {
                        $subQuery->whereBetween('buoi_bao_ve.GIO_BATDAU_BV', [
                            $gio_bat_dau,
                            date('H:i', strtotime($gio_bat_dau . ' +35 minutes'))
                        ])
                        ->orWhereBetween(
                            DB::raw('DATE_ADD(buoi_bao_ve.GIO_BATDAU_BV, INTERVAL 35 MINUTE)'), 
                            [$gio_bat_dau, date('H:i', strtotime($gio_bat_dau . ' +35 minutes'))]
                        );
                    });
            })
            ->orderBy('MA_PH', 'asc') // Ưu tiên phòng theo thứ tự
            ->first();
    }
    
    // Phương thức sắp xếp cho sinh viên  
    private function scheduleStudent($ma_sv, $ma_ph, $gio_bat_dau, $ma_hd, $ngay_bv) {  
        // Sinh mã buổi bảo vệ duy nhất  
        $lastMaBV = DB::table('buoi_bao_ve')->orderBy('MA_BV', 'desc')->first();  
        $ma_bv = $lastMaBV ? 'BV' . str_pad((int)substr($lastMaBV->MA_BV, 2) + 1, 3, '0', STR_PAD_LEFT) : 'BV001';  
    
        // Chèn buổi bảo vệ vào cơ sở dữ liệu  
        DB::table('buoi_bao_ve')->insert([  
            'MA_BV' => $ma_bv,  
            'MA_PH' => $ma_ph,  
            'GIO_BATDAU_BV' => $gio_bat_dau,  
            'NGAY_BV' => $ngay_bv,  
            'SO_LUONG_BV' => 1,  
        ]);  
    
        // Tính giờ kết thúc cho buổi bảo vệ  
        $gio_ket_thuc = date('H:i', strtotime("+35 minutes", strtotime($gio_bat_dau)));  
    
        // Chèn chi tiết buổi bảo vệ  
        DB::table('chitiet_lichbv')->insert([  
            'MA_BV' => $ma_bv,  
            'MA_SV' => $ma_sv,  
            'GIO_BAT_DAU' => $gio_bat_dau,  
            'GIO_KET_THUC' => $gio_ket_thuc,  
        ]);  
    
        // Chèn thông tin tổ chức  
        DB::table('to_chuc')->insert([  
            'MA_HD' => $ma_hd,  
            'MA_BV' => $ma_bv,  
        ]);  
    }
    


    ////ok
    public function save_lbv(Request $request) {
    // Xác thực dữ liệu đầu vào
    $request->validate([
        'MA_BV' => 'required',
        'NGAY_BV' => 'required|date',
        'sinh_vien' => 'required|array',
    ]);

    // Khởi tạo biến
    $morning_start = '07:15';
    $morning_end = '10:10';
    $afternoon_start = '13:30';
    $afternoon_end = '16:25';
    $time_increment = 35;
    $max_sessions_per_room = 12;

    $current_time = $morning_start;
    $current_day = $request->input('NGAY_BV');
    $current_room = 1;
    $current_students = 0;
    $total_rooms = DB::table('phong_hoc')->count(); // Đếm tổng số phòng có sẵn

    foreach ($request->input('sinh_vien') as $ma_sv) {
        $ma_dt = DB::table('sinh_vien')->where('MA_SV', $ma_sv)->value('MA_DT');
        $ma_hd = DB::table('duoc_danh_gia')->where('MA_DT', $ma_dt)->value('MA_HD');

        if (!$ma_dt || !$ma_hd) {
            return redirect()->back()->withErrors(['Không tìm thấy thông tin đầy đủ cho sinh viên mã ' . $ma_sv]);
        }

        // Xác định thời gian bắt đầu cho sinh viên
        if ($current_students < 6) { // 6 sinh viên cho buổi sáng
            $current_time = date('H:i', strtotime('07:15 + ' . ($current_students * $time_increment) . ' minutes'));
        } else { // 6 sinh viên cho buổi chiều
            $current_time = date('H:i', strtotime('13:30 + ' . (($current_students - 6) * $time_increment) . ' minutes'));
        }

        // Tìm phòng còn trống cho thời gian hiện tại và ngày bảo vệ
        $availableRoom = null;
        while (is_null($availableRoom) && $current_room <= $total_rooms) {
            $availableRoom = $this->findAvailableRoom($current_time, $current_day, $current_room);
            if (is_null($availableRoom)) {
                $current_room++;
            }
        }

        // Nếu không tìm thấy phòng trống, chuyển sang ngày tiếp theo
        if (is_null($availableRoom)) {
            $current_day = date('Y-m-d', strtotime('+1 day', strtotime($current_day)));
            $current_room = 1;
            $current_students = 0;
            $current_time = $morning_start;
            // Đặt lại thời gian cho sinh viên
            $current_time = $current_students < 6 ? 
                date('H:i', strtotime('07:15 + ' . ($current_students * $time_increment) . ' minutes')) : 
                date('H:i', strtotime('13:30 + ' . (($current_students - 6) * $time_increment) . ' minutes'));
        }

        // Nếu tìm thấy phòng trống
        if ($availableRoom) {
            $ma_ph = $availableRoom->MA_PH;

            // Sắp xếp cho sinh viên
            $this->scheduleStudent($ma_sv, $ma_ph, $current_time, $ma_hd, $current_day);

            $current_students++; // Cập nhật số sinh viên đã sắp xếp

            // Nếu phòng hiện tại đã đầy sinh viên
            if ($current_students >= $max_sessions_per_room) {
                // Đặt lại đếm sinh viên cho phòng tiếp theo
                $current_students = 0;
                $current_room++;
            }
        }
    }

    return redirect()->route('lichbaove.list_lbv')->with('thongbao', 'Thêm lịch bảo vệ thành công!');
}

// Phương thức tìm phòng còn trống
private function findAvailableRoom($current_time, $current_day, $current_room) {
    return DB::table('phong_hoc')
        ->whereNotExists(function ($query) use ($current_time, $current_day) {
            $query->select(DB::raw(1))
                ->from('buoi_bao_ve')
                ->whereColumn('phong_hoc.MA_PH', 'buoi_bao_ve.MA_PH')
                ->where('buoi_bao_ve.NGAY_BV', $current_day)
                ->whereBetween('buoi_bao_ve.GIO_BATDAU_BV', [
                    $current_time,
                    date('H:i', strtotime($current_time . ' +35 minutes'))
                ]);
        })
        ->where('MA_PH', 'P' . str_pad($current_room, 2, '0', STR_PAD_LEFT))
        ->first();
}

// Phương thức sắp xếp cho sinh viên
private function scheduleStudent($ma_sv, $ma_ph, $gio_bat_dau, $ma_hd, $ngay_bv) {
    // Sinh mã buổi bảo vệ duy nhất
    $lastMaBV = DB::table('buoi_bao_ve')->orderBy('MA_BV', 'desc')->first();
    $ma_bv = $lastMaBV ? 'BV' . str_pad((int)substr($lastMaBV->MA_BV, 2) + 1, 3, '0', STR_PAD_LEFT) : 'BV001';

    // Chèn buổi bảo vệ vào cơ sở dữ liệu
    DB::table('buoi_bao_ve')->insert([
        'MA_BV' => $ma_bv,
        'MA_PH' => $ma_ph,
        'GIO_BATDAU_BV' => $gio_bat_dau,
        'NGAY_BV' => $ngay_bv,
        'SO_LUONG_BV' => 1,
    ]);

    // Tính giờ kết thúc cho buổi bảo vệ
    $gio_ket_thuc = date('H:i', strtotime("+35 minutes", strtotime($gio_bat_dau)));

    // Chèn chi tiết buổi bảo vệ
    DB::table('chitiet_lichbv')->insert([
        'MA_BV' => $ma_bv,
        'MA_SV' => $ma_sv,
        'GIO_BAT_DAU' => $gio_bat_dau,
        'GIO_KET_THUC' => $gio_ket_thuc,
    ]);

    // Chèn thông tin tổ chức
    DB::table('to_chuc')->insert([
        'MA_HD' => $ma_hd,
        'MA_BV' => $ma_bv,
    ]);
}
